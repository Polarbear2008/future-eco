-- SQL commands to set up the projects table and RLS policies
-- Run these in the Supabase SQL Editor

-- First, create the projects table if it doesn't exist
CREATE TABLE IF NOT EXISTS projects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    short_description TEXT NOT NULL,
    image TEXT,
    category TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'planning',
    featured BOOLEAN NOT NULL DEFAULT false,
    progress INTEGER DEFAULT 0,
    location TEXT,
    start_date DATE,
    end_date DATE,
    budget NUMERIC DEFAULT 0,
    raised NUMERIC DEFAULT 0,
    coordinator TEXT,
    team_members TEXT[] DEFAULT '{}',
    goals TEXT[] DEFAULT '{}',
    updates JSONB DEFAULT '[]',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT status_check CHECK (status IN ('planning', 'active', 'completed'))
);

-- Enable RLS on the projects table
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;

-- Remove any existing policies (optional)
DROP POLICY IF EXISTS "Allow public read access" ON projects;
DROP POLICY IF EXISTS "Allow authenticated insert" ON projects;
DROP POLICY IF EXISTS "Allow authenticated update" ON projects;
DROP POLICY IF EXISTS "Allow authenticated delete" ON projects;

-- Create a policy that allows anyone to read project records
CREATE POLICY "Allow public read access"
ON projects
FOR SELECT
USING (true);

-- Create a policy that allows authenticated users to insert new projects
CREATE POLICY "Allow authenticated insert"
ON projects
FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Create a policy that allows authenticated users to update projects
CREATE POLICY "Allow authenticated update"
ON projects
FOR UPDATE 
USING (auth.role() = 'authenticated');

-- Create a policy that allows authenticated users to delete projects
CREATE POLICY "Allow authenticated delete"
ON projects
FOR DELETE 
USING (auth.role() = 'authenticated');

-- Create a trigger to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop the trigger if it already exists
DROP TRIGGER IF EXISTS update_projects_modtime ON projects;

-- Create the trigger
CREATE TRIGGER update_projects_modtime
BEFORE UPDATE ON projects
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();
